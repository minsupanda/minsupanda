[GameManger]
- m_hThis : static GameManager
- m_CurPlayColor : PieceColor
- m_CurChoicePiece : Piece*
- m_ClickTileImage : Bitmap*
- m_MoveblePosition : vector<RECT>
-----------------------------------------
- GameManager()
- SetTurn() : void
- SetScene() : void
+ ~GameManager()
+ Get_Instance() : GameManager*
+ Init(HWND) : void
+ Click_Check(POINT) : bool
+ Draw(HDC) : void
+ Distory() : void


[GameBoardManager]
- m_hthis : static GameBoardManager
- m_Image[2] : Bitmap
- m_width : int
- m_height : int
- m_Tile[8][8] : TileCoord
-----------------------------------------
- GameBoardManager() : GameBoardManager
+ ~GameBoardManager() : GameBoardManager
+ Get_Instance() : GameBoardManager*
+ Init(int, int, int, int) : void
+ Draw(HDC) : void
+ PieceCoord_In_Tile_Save(vector) : void
+ Point_in_TileRect_Check(POINT) : Piece
+ Position_In_PieceCheck(Piece*) : bool
+ Distory() : void


[PieceManager]--->[Piece]
- m_hthis : static PieceManager
- Pieces[2] : vector<Pieces*>
------------------------------------
- PieceManager() : PieceManager
+ ~GameBoardManager() : PieceManager
+ Get_Instance() : PieceManager
+ Get_Pieces(PieceColor) : vector<Piece*>
+ Init(int, int, int, int) : void
+ CoordInit<Template>(PieceColor, int, int, int, int, int) : void
+ Draw(HDC) : void
+ Distory() : void


<<enumerator>>
PieceType {,,,,,, }
<<enumerator>>
PieceColor {,,,,,, }

<<abstract>>
[Piece]
- m_piece : PieceType
- m_color : PieceColor
- m_pieceImage : Bitmap*
- m_ix : int
- m_iy : int
- m_width : int
- m_height : int
------------------------------------
+ MoveCheck(vector<RECT>&) abstract : void <= [GameManger].Click_Check()
+ Get_PieceType() : PieceType
+ Get_Color() : PieceColor
+ Get_CX() : int
+ Get_CY() : int
+ Init(int, int, int, int) : void
+ Draw(HDC) : void
+ PositionChange(RECT*) : void


             <<abstract>>  
[Pawn] - - ▷ [Piece]
------------------------------------
+ MoveCheck(vector<RECT>&) override : void
+ Pawn(PieceColor)

             <<abstract>>  
[Knight] - - ▷ [Piece]
------------------------------------
+ MoveCheck(vector<RECT>&) override : void
+ Knight(PieceColor) : Knight

             <<abstract>>  
[Rook] - - ▷ [Piece]
------------------------------------
+ MoveCheck(vector<RECT>&) override : void
+ Rook(PieceColor) : Rook

             <<abstract>>  
[Bishop] - - ▷ [Piece]
------------------------------------
+ MoveCheck(vector<RECT>&) override : void
+ Bishop(PieceColor) : Bishop

             <<abstract>>  
[Queen] - - ▷ [Piece]
------------------------------------
+ MoveCheck(vector<RECT>&) override : virtual void
+ Queen(PieceColor) : Queen

             <<abstract>>  
[King] - - ▷ [Piece]
------------------------------------
+ MoveCheck(vector<RECT>&) override : virtual void
+ King(PieceColor) : King
