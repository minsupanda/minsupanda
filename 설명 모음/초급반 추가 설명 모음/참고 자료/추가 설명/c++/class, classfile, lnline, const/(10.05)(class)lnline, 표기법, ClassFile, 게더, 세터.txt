<lnline함수>

[평소 사용했던 함수]
1. 함수 호출을 만나면 메모리 할당하고 점프해서 함수 종속문장 실행
2. 스코프의 마지막 or return을 만나면 반환하고 메모리 해제하고 호출위치로 점프
=> 반복 횟수가 많아지게 되면 메모리 할당, 해제 계속 반복하게 되면서 속도가 비교적 느림

[lnline 함수]
1. Date 영역(전역변수 할당 영역)에 만들어져 프로그램 시작과 함께 메모리 할당되고 종료 시 소멸
2. 함수 호출 부분 만날 시 만들어진 메모리에 접근해서 코드 실행하고 돌아오게 됨
3. 메모리 할당, 해체가 줄어들어 비교적 빠른 호출 가능
But 해당 함수의 코드가 무겁거나 잘 접근하지 않는 함수를 lnline으로 하게 된다면 오히려 계속 메모리를 들고 있어 속도 저하 발생

[게더, 세터]
1. 세터는 변수, 함수를 만드는 함수
2. 게더는 특정 값을 반환하는 함수
=> 여기서 평균적으로 게더가 간략하고 자주 접근하는 파일일 때 lnline함수 사용


<표기법>

1. PascalCase (파스칼 표기법)
 - 첫 단어를 대문자로 시작하는 표기법
 - ex. BackgroudColor, TypeName, PowerPoint

2. camelCase (캐멀 표기법)
 - 각 단어의 첫 단어를 대문자로 표기하고 붙여 쓰되, 맨 처음 단어는 소문자로 표기하는 방법
 - 띄어쓰기 대신 대문자로 단어를 구분하는 방식
 - ex. backgroundColor, typeName, iPhone

3. Hungarian notation (헝가리안 표기법)
 - 변수의 이름만으로도 변수의 자료형과 선언위치를 알 수 있는 변수 명명법
 - 접두어를 사용하는 표기법
 - 형식은 camelCase와 같지만, 맨 앞의 단어가 자료형을 나타내는 접두어
 - ex. int nNum(int형 정수) i는 주로 인덱스로 사용
 - NULL를 사용하는 문자열 char szName[10] / 배열 arr int iarrNum[10] : int형 배열
 - NULL를 사용하지 않은 단일 문자배열 char chName[10]
 - int m_iNum : int형 정수 멤버변수

4. snake_case (스네이크) or under_scores (언더 스코프)
 - 단어를 밑줄 문자(_)로 구분하는 표기법
 - ex. background_color, type_name


<ClassFile>
 - Class를 .cpp와 .h로 나누어 파일단위로 관리
 - .h : Class의 원형 작성
 - .cpp : Class의 맴버함수 종속문장 작성
 - 즉, 하나의 Class를 두 개의 파일로 나누어 관리
