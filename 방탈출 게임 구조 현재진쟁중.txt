[Player] : public GameObject
- state : State
- dir : Direction 
- renderer : SpriteRenderer*
- anim : AnimationComponent*
- Inventory : std::vector<int> // GameManager에서 모든 아이템을 한 번에 관리하고, 플레이어 인벤토리나 퀴즈 정답 아이템은 인덱스로 가지고 있게 하기
// 배열로 만들 지 고민하기
- EquipItem : Item*
- bounds : int
- pressInteractionKey : bool
- Move : void(const float& deltaTime);
- ChangeItem() : void
------------------------------------------
+ Init() : void
+ Release() : void
+ Update() : void(const float& deltaTime)
+ Draw() : void
+ CheckInventory() : void // 인벤토리 열어서 장착 아이템 교체하는 기능
+ GetItem(std::vector<item*> getitem0)
+ GetpressInteractionKey() : bool 

// 위치, 퀴즈, 아이템
// 그래픽 컴포넌트 추가시키기
absrtact Furniture : public GameObject  // 얘를 상속받아서 각 가구 오브젝트 클래스 만들기
- Bitmpa* Image
- renderer : SpriteRenderer*
- Quiz* quiz
- std::vector<Item*>
-----------------------
+virtual  VOID Initialize(); override; // 가구 이미지, 아이템 이미지 불러오고, 컴포넌트 추가시키기
+virtual  VOID Release();override;
+virtual  VOID Update(const FLOAT& deltaTime);override; // 상호작용 되는 지 확인 한 후 업데이트 
+virtual  VOID Draw(); override;
+ bool Interaction(Item* EquipItem)


// 퀴즈 추상 클래스
Quiz : public GameObject   // 얘를 상속받아서 각 퀴즈 클래스 만들기
- Bitmpa* Image
- renderer : SpriteRenderer*
- std::string Answer
- bool isClear
-------------------------------
+virtual  VOID Initialize();override;
+virtual  VOID Release();override;
+virtual  VOID Update(const FLOAT& deltaTime);override; //  Furniture update에서 작동하게 하기
+virtual  VOID Draw(); override; // Furniture update에서 작동하게 하기
+bool IsClear()
+bool AnswerCheck(std::string answer) // 내가 쓰는 답은 그때 그냥 바로 넘겨줘서 확인할 수 있도록


// 배치된 사물 오브젝트들
Phone : public Furniture
Clock : public Furniture
Safe :  public Furniture
StorageCabinet : public Furniture



// GameScene : public Scene
- Bitmap* background
- UIButton* puaseBtn
- UIImage* pauseWindow
- Player* player // 오브젝트 위치와 비교 + Dir 확인
- // 오브젝트 배열들
- Furniture* Interactionfurniture = null // 오브젝트와 상호작용 하게 되면 값이 바뀌게
- CheckInteraction() : bool
------------------------------------------




