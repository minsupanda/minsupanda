[Mecro]
- m_gravity : float = 9.80665


[FrameWork]
- m_NormalVector : Vector2
- MyCreateDIBSection : HBITMAP(HDC hdc, int width, int height)
- m_hWnd : HWND 
- m_forntDC : HDC 
- m_backDC : HDC
- m_backBitmap : HBITMAP
- physicsEngine : PhysicsEngine
- Figures : vector<Firgure*>
---------------------------------
+ Init : void(HWND hWnd)
+ Draw : void()
+ Update : void(const float& deltaTime) // Figures->Update() 후 CollisionCheck() 호출 
+ CollisionCheck() : void // physicsEngine ->CollisionCheck() 호출



[PhysicsEngine]
- CollidingObject : vector<Firgure*>
---------------------------------------------------
+ CollisionCheck : bool(std::vector<Firgure*> Figures) // Figures for문 돌리면서 각 도형 충돌체크 함수로 이동 -> 충돌체크 함수에서 true가 반환되면 CollidingObject에 input하고 바로 충돌 후 처리하고 이어서 반복문 진행, 반복문 끝나면 종료
+ CirclevsCircle : bool(Circle* lhs, Circle* rhs) // 충돌 확인
+ CollisionHandling : void() // 내적 < 0이면 충돌 가속도 적용 후 물체 이동, CollidingObject->PositionUpdate() 호출



<<abstract>>
[Figure]
enum FIGURE
{
CirCle,
Square
};
- m_FigureName : FIGURE
- m_Positinon : Position
- m_e : float
- m_Mass : float
- m_Inv_Mass : float = 1 / mass; // mass가 0이 될 수 없도록 막기
- m_Velocity : float
---------------------------------
+ Init : virutal void() abstract
+ Draw : virutal void() abstract
+ Update : virtual void(const float& deltaTime) abstract // 중력 가속도 적용
+ PositionUpdate : virtual void(const float& im, const float& deltaTime) abstract // 물체 이동


[Circle] : public Figure
- m_Radius : float
---------------------------------
+ Init : virutal void() override
+ Draw : virutal void() override
+ Update : virtual void(const float& deltaTime) override
+ PositionUpdate : virtual void(const float& im, const float& deltaTime) override


[Square]: public Figure
- m_Width : float
- m_Hieght : float
---------------------------------
+ Init : virutal void() override
+ Draw : virutal void() override
+ Update : virtual void(const float& deltaTime) override
+ PositionUpdate : virtual void(const float& im, const float& deltaTime) override
